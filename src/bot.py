import os
from telebot import TeleBot, types
from datetime import datetime, timedelta


BOT_TOKEN = os.getenv('BOT_TOKEN') or "8081832975:AAFCBtxLiT2sxohtgKKVtPfwG7dNFYjIlf"
bot = TeleBot(BOT_TOKEN)

users = {}
user_states = {}


SERVICES = {
    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ": [
        "–¢–û-1 (10 000 –∫–º)", 
        "–¢–û-2 (30 000 –∫–º)",
        "–¢–û-3 (60 000 –∫–º)"
    ],
    "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞": [
        "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
        "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–≤–µ—Å–∫–∏"
    ],
    "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏": [
        "–ü–æ–¥–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
        "–û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –º–µ—Ö–∞–Ω–∏–∫–∞",
        "–û—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ"
    ],
    "–î–æ–ø. —É—Å–ª—É–≥–∏": [
        "–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂",
        "–•–∏–º—á–∏—Å—Ç–∫–∞ —Å–∞–ª–æ–Ω–∞",
        "–ü–æ–ª–∏—Ä–æ–≤–∫–∞ –∫—É–∑–æ–≤–∞",
        "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø. –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"
    ]
}


def main_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É", "–ú–æ–∏ –∑–∞–ø–∏—Å–∏", "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    return keyboard

def services_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for service in SERVICES.keys():
        keyboard.add(service)
    keyboard.add("–û—Ç–º–µ–Ω–∞")
    return keyboard

def subtypes_keyboard(service):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for subtype in SERVICES[service]:
        keyboard.add(subtype)
    keyboard.add("–ù–∞–∑–∞–¥")
    return keyboard

def generate_dates():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –¥–∞—Ç –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥ (—Ç–æ–ª—å–∫–æ –±—É–¥–Ω–∏)"""
    dates = []
    today = datetime.now()
    for i in range(1, 8):
        date = today + timedelta(days=i)
        if date.weekday() < 5:  # –ü–Ω-–ü—Ç
            dates.append(date.strftime("%d.%m.%Y"))
    return dates

def time_slots_keyboard(date):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for time in ["09:00", "11:00", "13:00", "15:00", "17:00"]:
        keyboard.add(f"{date} {time}")
    keyboard.add("–ù–∞–∑–∞–¥")
    return keyboard


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    if user_id not in users:
        users[user_id] = {
            "full_name": None,
            "cars": [],
            "appointments": []
        }
        user_states[user_id] = "GET_NAME"
        bot.send_message(user_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
    else:
        user_states[user_id] = "MAIN_MENU"
        bot.send_message(user_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "GET_NAME")
def get_name(message):
    user_id = message.chat.id
    users[user_id]["full_name"] = message.text
    user_states[user_id] = "MAIN_MENU"
    bot.send_message(
        user_id,
        f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, {message.text}!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard()
    )

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "MAIN_MENU")
def main_menu(message):
    user_id = message.chat.id
    if message.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É":
        user_states[user_id] = "SELECT_SERVICE"
        bot.send_message(
            user_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:",
            reply_markup=services_keyboard()
        )
    elif message.text == "–ú–æ–∏ –∑–∞–ø–∏—Å–∏":
        show_appointments(user_id)
    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        user_states[user_id] = "GET_NAME"
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
    else:
        bot.send_message(user_id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é üëá", reply_markup=main_menu_keyboard())


@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "SELECT_SERVICE")
def select_service(message):
    user_id = message.chat.id
    if message.text == "–û—Ç–º–µ–Ω–∞":
        user_states[user_id] = "MAIN_MENU"
        bot.send_message(user_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
    elif message.text in SERVICES:
        users[user_id]["selected_service"] = message.text
        user_states[user_id] = "SELECT_SUBTYPE"
        bot.send_message(
            user_id,
            f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É ({message.text}):",
            reply_markup=subtypes_keyboard(message.text)
        )

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "SELECT_SUBTYPE")
def select_subtype(message):
    user_id = message.chat.id
    if message.text == "–ù–∞–∑–∞–¥":
        user_states[user_id] = "SELECT_SERVICE"
        bot.send_message(
            user_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:",
            reply_markup=services_keyboard()
        )
    elif message.text in SERVICES[users[user_id]["selected_service"]]:
        users[user_id]["selected_subtype"] = message.text
        user_states[user_id] = "SELECT_DATE"
        
        
        dates = generate_dates()
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for date in dates:
            keyboard.add(date)
        keyboard.add("–ù–∞–∑–∞–¥")
        bot.send_message(
            user_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=keyboard
        )

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "SELECT_DATE")
def select_date(message):
    user_id = message.chat.id
    if message.text == "–ù–∞–∑–∞–¥":
        user_states[user_id] = "SELECT_SUBTYPE"
        bot.send_message(
            user_id,
            f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É ({users[user_id]['selected_service']}):",
            reply_markup=subtypes_keyboard(users[user_id]["selected_service"])
        )
    else:
        if message.text == "–°–µ–≥–æ–¥–Ω—è":
            date = datetime.now().strftime("%d.%m.%Y")
        elif message.text == "–ó–∞–≤—Ç—Ä–∞":
            date = (datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y")
        else:
            date = message.text
        
        users[user_id]["selected_date"] = date
        user_states[user_id] = "SELECT_TIME"
        bot.send_message(
            user_id,
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {date}:",
            reply_markup=time_slots_keyboard(date)
        )

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "SELECT_TIME")
def select_time(message):
    user_id = message.chat.id
    if message.text == "–ù–∞–∑–∞–¥":
        user_states[user_id] = "SELECT_DATE"
        dates = generate_dates()
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for date in dates:
            keyboard.add(date)
        keyboard.add("–ù–∞–∑–∞–¥")
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=keyboard)
    else:
        date, time = message.text.split()
        users[user_id]["selected_time"] = time
        
        
        users[user_id]["appointments"].append({
            "service": users[user_id]["selected_service"],
            "subtype": users[user_id]["selected_subtype"],
            "date": date,
            "time": time
        })
        
       
        confirm_msg = (
            "‚úÖ –ó–∞–ø–∏—Å—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {users[user_id]['full_name']}\n"
            f"üîß –£—Å–ª—É–≥–∞: {users[user_id]['selected_subtype']}\n"
            f"üìÖ –î–∞—Ç–∞: {date}\n"
            f"‚è∞ –í—Ä–µ–º—è: {time}\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –Ω–∞—à–µ–º—É –∞–≤—Ç–æ—Ç–µ—Ö—Ü–µ–Ω—Ç—Ä—É!"
        )
        
        bot.send_message(
            user_id,
            confirm_msg,
            reply_markup=main_menu_keyboard()
        )
        user_states[user_id] = "MAIN_MENU"


def show_appointments(user_id):
    if not users[user_id]["appointments"]:
        bot.send_message(
            user_id,
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.",
            reply_markup=main_menu_keyboard()
        )
    else:
        appointments_text = "üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
        for i, app in enumerate(users[user_id]["appointments"], 1):
            appointments_text += (
                f"{i}. {app['service']} - {app['subtype']}\n"
                f"   üìÖ {app['date']} ‚è∞ {app['time']}\n\n"
            )
        bot.send_message(
            user_id,
            appointments_text,
            reply_markup=main_menu_keyboard()
        )


if __name__ == "__main__":
    print("üöó –ë–æ—Ç –∞–≤—Ç–æ—Ç–µ—Ö—Ü–µ–Ω—Ç—Ä–∞ –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling()